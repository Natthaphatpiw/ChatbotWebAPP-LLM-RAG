import os
import pinecone
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

def setup_pinecone_index():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Pinecone index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå vetbot"""
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Pinecone
    PINECONE_API_KEY = os.environ.get('PINECONE_API_KEY')
    
    if not PINECONE_API_KEY:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PINECONE_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
        return
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Pinecone (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pinecone-client 3.x)
    pinecone.init(api_key=PINECONE_API_KEY)
    
    index_name = "vetbot"
    dimension = 384  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sentence-transformers/all-MiniLM-L6-v2
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ index ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    existing_indexes = pinecone.list_indexes()
    
    if index_name in existing_indexes:
        print(f"‚úÖ Index '{index_name}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡πÉ‡∏´‡∏°‡πà
    try:
        print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á index '{index_name}'...")
        
        pinecone.create_index(
            name=index_name,
            dimension=dimension,
            metric="cosine"
        )
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á index '{index_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        print("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà index ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    setup_pinecone_index() 